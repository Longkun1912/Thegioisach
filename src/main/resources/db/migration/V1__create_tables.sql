create table roles (
    id int primary key generated by default as identity,
    name varchar(64)
);

create table users (
    id uuid primary key,
    username varchar(100),
    image bytea,
    email varchar(200),
    phone_number varchar(11),
    status varchar(8),
    last_updated timestamp,
    password varchar(200),
    user_role int not null,
    foreign key(user_role) references roles(id)
);

create table posts (
    id uuid primary key,
    title varchar(200),
    content_image bytea,
    content_text varchar(1000),
    created_time timestamp,
    user_post uuid not null,
    foreign key(user_post) references users(id) on delete cascade
);


create table post_share (
    user_id uuid,
    post_id uuid,
    foreign key (user_id) references users(id) on delete cascade,
    foreign key (post_id) references posts(id) on delete cascade
);

create table chats (
    id uuid primary key,
    user1 uuid not null,
    user2 uuid not null,
    foreign key (user1) references users(id),
    foreign key (user2) references users(id)
);

create table categories (
    id int primary key generated by default as identity,
    name varchar(64)
);

create table books (
    id int primary key generated by default as identity,
    name varchar(64),
    author varchar(64),
    published_date timestamp,
    page int,
    description varchar(10000),
    image bytea,
    content bytea,
    book_category int not null,
    foreign key(book_category) references categories(id)
);

create table favorites (
    id uuid primary key,
    name varchar(64),
    created_time timestamp,
    user_favorite uuid not null,
    foreign key(user_favorite) references users(id)
);

create table book_favorite_details (
    book_id int not null,
    favorite_id uuid not null,
    foreign key (book_id) references books(id),
    foreign key (favorite_id) references favorites(id)
);

create table likes (
    id int primary key generated by default as identity,
    user_like uuid not null,
    post_like uuid,
    book_like int,
    foreign key(user_like) references users(id),
    foreign key(post_like) references posts(id),
    foreign key(book_like) references books(id)
);

create table dislikes (
    id int primary key generated by default as identity,
    user_dislike uuid not null,
    post_dislike uuid,
    book_dislike int,
    foreign key(user_dislike) references users(id),
    foreign key(post_dislike) references posts(id),
    foreign key(book_dislike) references books(id)
);

create table comments (
    id int primary key generated by default as identity,
    text varchar(1000),
    created_time timestamp,
    user_comment uuid not null,
    post_comment uuid,
    book_comment int,
    foreign key(user_comment) references users(id),
    foreign key(post_comment) references posts(id),
    foreign key(book_comment) references books(id)
);

create table replies (
    id int primary key generated by default as identity,
    text varchar(1000),
    created_time timestamp,
    user_reply uuid not null,
    comment_reply int not null,
    foreign key(user_reply) references users(id),
    foreign key(comment_reply) references comments(id)
);